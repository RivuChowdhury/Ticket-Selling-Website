<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Razorpay Web-Integration</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="stylesheet" href="style/style.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script> 

    <style>
        /* Match Card Styles */
        .col {
            flex: 0 0 calc(33.33% - 20px);
            margin: 10px;
            box-sizing: border-box;
        }

        @media (max-width: 992px) {
            .col {
                flex: 0 0 calc(50% - 20px);
            }
        }

        @media (max-width: 768px) {
            .col {
                flex: 0 0 calc(100% - 20px);
            }
        }

        .card {
            border: 1px solid #ccc;
            border-radius: 8px;
            overflow: hidden;
            height: 300px; /* Adjust card height as needed */
        }

        .card-body {
            padding: 20px;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .card-title {
            font-size: 1.5rem; /* Increase title font size */
            margin-bottom: 10px;
        }

        .card-text {
            margin-bottom: 15px;
            flex-grow: 1;
        }

        .btn {
            display: inline-block;
            font-size: 1rem;
            font-weight: bold;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            background-color: #007bff;
            color: #fff;
            border: 1px solid #007bff;
        }

        .btn:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

        .pay-form {
            margin-top: 15px;
            text-align: center;
        }

        .rzp-button1 {
            display: inline-block;
            background-color: #ff9800;
            color: #fff;
            font-size: 1rem;
            font-weight: bold;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .rzp-button1:hover {
            background-color: #2ab5ba;
        }

        /* Search Container Styles */
        .search-container {
            margin-bottom: 20px;
            padding: 10px;
            box-sizing: border-box;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        #searchInput {
            width: 100%;
            box-sizing: border-box;
            border: none;
            outline: none;
        }

        /* Responsive styles */
        #matchContainer {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <h1>Customer Details:</h1>
    <table border="1" width="100%">
        <tr>
            <th>ID:</th>
            <th>Name:</th>
            <th>Email:</th>
        </tr>
        <% if(customer.length > 0){ %>
            <% for(var i = 0; i < customer.length; i++){ %>
                <tr>
                    <td><%- customer[i].Customer_id %></td>
                    <td><%- customer[i].Customer_name %></td>
                    <td><%- customer[i].Customer_Email %></td>
                </tr>
            <% } %>
        <% } %>
    </table>

    <table border="1" width="100%">
        <tr>
            <th>Customer Id:</th>
            <th>Name:</th>
            <th>Email:</th>
            <th>Payment Id:</th>
            <th>Amount:</th>
            <th>Description:</th>
        </tr>
        <% if(transactions.length > 0){ %>
            <% for(var i = 0; i < transactions.length; i++){ %>
                <tr>
                    <td><%- transactions[i].Customer_id %></td>
                    <td><%- transactions[i].Customer_name %></td>
                    <td><%- transactions[i].Customer_Email %></td>
                    <td><%- transactions[i].payment_id %></td>
                    <td><%- transactions[i].amount %></td>
                    <td><%- transactions[i].descriptions %></td>
                </tr>
            <% } %>
        <% } %>
    </table>

    <div class="search-container">
        <input type="text" id="searchInput" placeholder="Search for a match...">
    </div>
    <div class="pay-form" id="matchContainer">
        <!-- Match cards will be appended here -->
    </div>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            fetchMatchData();
        });

        function fetchMatchData() {
            const apiKey = 'ce382257-e969-464f-bb99-51377a92130d';
            const apiUrl = `https://api.cricapi.com/v1/series?apikey=${apiKey}&offset=0&search=`;

            fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    console.log('API Response:', data); // Log the API response
                    const matchContainer = document.getElementById('matchContainer');
                    if (data && data.data && data.data.length > 0) {
                        data.data.forEach(seriesData => {
                            const matchCard = createMatchCard(seriesData);
                            matchContainer.appendChild(matchCard);
                        });
                    } else {
                        const errorCard = document.createElement('div');
                        errorCard.textContent = 'No match data found or invalid response.';
                        matchContainer.appendChild(errorCard);
                    }
                })
                .catch(error => {
                    console.error('Error fetching match data:', error);
                    const matchContainer = document.getElementById('matchContainer');
                    matchContainer.innerHTML = 'Error fetching match data. Please try again later.';
                });
        }

        function createMatchCard(seriesData) {
            const matchCard = document.createElement('div');
            matchCard.classList.add('col');

            const card = document.createElement('div');
            card.classList.add('card');

            const cardBody = document.createElement('div');
            cardBody.classList.add('card-body');

            const matchTitle = document.createElement('h5');
            matchTitle.classList.add('card-title');
            matchTitle.textContent = seriesData.name; // Assuming seriesData contains match name

            const matchDescription = document.createElement('p');
            matchDescription.classList.add('card-text');
            matchDescription.textContent = seriesData.name; // Assuming seriesData contains match description

            const price = document.createElement('h3');
            price.textContent = `Rs. 500`; // Assuming seriesData contains price

            const ticketImage = document.createElement('img');
            ticketImage.setAttribute('src', 'https://thumbs.dreamstime.com/b/two-old-movie-ticket-stub-isolated-white-background-132900151.jpg');
            ticketImage.setAttribute('alt', 'Ticket');
            ticketImage.setAttribute('height', '200');
            ticketImage.setAttribute('width', '100');

            const payForm = document.createElement('form');
            payForm.classList.add('pay-form'); // Adding the 'pay-form' class to the form
            payForm.setAttribute('action', '/payments'); // Set the action attribute to '/payments'
            payForm.setAttribute('method', 'POST'); // Set the method attribute to 'POST'

            const nameInput = document.createElement('input');
            nameInput.setAttribute('type', 'hidden');
            nameInput.setAttribute('name', 'name'); // Keeping the name attribute consistent with the existing form
            nameInput.setAttribute('value', seriesData.name);

            const amountInput = document.createElement('input');
            amountInput.setAttribute('type', 'hidden');
            amountInput.setAttribute('name', 'amount'); // Keeping the name attribute consistent with the existing form
            amountInput.setAttribute('value', '500'); // Set amount to 500

            const descriptionInput = document.createElement('input');
            descriptionInput.setAttribute('type', 'hidden');
            descriptionInput.setAttribute('name', 'description'); // Keeping the name attribute consistent with the existing form
            descriptionInput.setAttribute('value', seriesData.name);

            const payButton = document.createElement('button');
            payButton.classList.add('rzp-button1');
            payButton.textContent = 'Buy Now';

            payButton.addEventListener('click', async function (e) {
                e.preventDefault();
                var form = this.closest('.pay-form');
                var amountInput = form.querySelector('input[name="amount"]');
                var amount = amountInput.value;
                var descriptionInput = form.querySelector('input[name="description"]');
                var description = descriptionInput.value;

                let response = await fetch("/payment", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        amount: amount,
                        description: description,
                    })
                });


                let orderData = await response.json();
                console.log(orderData);

                var options = {
                    "key": "rzp_test_78gcG2fJzzjtxg",
                    "amount": 500 * 100, // Convert amount to currency subunits (e.g., paise)
                    "currency": "INR",
                    "order_id": orderData.id,
                    "handler": function (response) {
                        window.location.href = '/payment/receipt';
                    },
                };

                var rzp = new Razorpay(options);
                rzp.open();
            });

            payForm.appendChild(nameInput);
            payForm.appendChild(amountInput);
            payForm.appendChild(descriptionInput);
            payForm.appendChild(payButton);

            cardBody.appendChild(matchTitle);
            cardBody.appendChild(matchDescription);
            cardBody.appendChild(price);
            cardBody.appendChild(ticketImage); // Append ticket image here
            cardBody.appendChild(payForm);

            card.appendChild(cardBody);

            matchCard.appendChild(card);

            return matchCard;
        }

        // Function to filter matches based on search input
        document.getElementById('searchInput').addEventListener('input', function() {
            filterMatches(this.value.toLowerCase());
        });

        function filterMatches(searchTerm) {
            const cards = document.querySelectorAll('.col');
            cards.forEach(card => {
                const title = card.querySelector('.card-title').textContent.toLowerCase();
                const description = card.querySelector('.card-text').textContent.toLowerCase();
                if (title.includes(searchTerm) || description.includes(searchTerm)) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        }
    </script>   
</body>
</html>
